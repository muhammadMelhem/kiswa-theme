// This file is auto-generated by keycloakify. Do not edit it manually.
// Hash: 45f4aaf27f56bc4ef40f104b36be9a9f53d934cead608232f15fc39305fb0459

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

import type { ApplicationRef, ComponentRef, EnvironmentProviders, Type } from '@angular/core';

export type ThemeName = 'keycloakify-starter-angular-vite';

export const themeNames: ThemeName[] = ['keycloakify-starter-angular-vite'];

export type KcEnvName = never;

export const kcEnvNames: KcEnvName[] = [];

export const kcEnvDefaults: Record<KcEnvName, string> = {};

export type KcContext = import('./login/KcContext').KcContext | import('./account/KcContext').KcContext;

declare global {
  interface Window {
    kcContext?: KcContext;
  }
}

export async function bootstrapKcApplication(params: {
  kcContext: KcContext;
  bootstrapApplication: (params: {
    KcRootComponent: Type<unknown>;
    kcProvider: EnvironmentProviders;
  }) => Promise<ApplicationRef>;
}): Promise<ApplicationRef> {
  const { kcContext, bootstrapApplication } = params;
  let appRef: ApplicationRef;

  switch (kcContext.themeType) {
    case 'login':
      {
        const [
          { provideKeycloakifyAngular },
          { getI18n },
          {
            PageComponent,
            TemplateComponent,
            doUseDefaultCss,
            classes,
            UserProfileFormFieldsComponent,
            doMakeUserConfirmPassword,
          },
        ] = await Promise.all([
          import('@keycloakify/angular/login/providers/keycloakify-angular'),
          import('./login/i18n'),
          import('./login/KcPage').then(({ getKcPage }) => getKcPage(kcContext.pageId)),
        ] as const);

        appRef = await bootstrapApplication({
          KcRootComponent: TemplateComponent,
          kcProvider: provideKeycloakifyAngular({
            kcContext,
            classes,
            getI18n,
            doUseDefaultCss,
            doMakeUserConfirmPassword,
          }),
        });

        appRef.components.forEach((componentRef) => {
          // page must be defined first
          if ('page' in componentRef.instance) {
            componentRef.setInput('page', PageComponent);
          }
          if ('userProfileFormFields' in componentRef.instance) {
            componentRef.setInput('userProfileFormFields', UserProfileFormFieldsComponent);
          }
        });
      }
      break;
    case 'account':
      {
        const [
          { provideKeycloakifyAngular },
          { getI18n },
          { PageComponent, TemplateComponent, doUseDefaultCss, classes },
        ] = await Promise.all([
          import('@keycloakify/angular/account/providers/keycloakify-angular'),
          import('./account/i18n'),
          import('./account/KcPage').then(({ getKcPage }) => getKcPage(kcContext.pageId)),
        ] as const);

        appRef = await bootstrapApplication({
          KcRootComponent: TemplateComponent,
          kcProvider: provideKeycloakifyAngular({
            kcContext,
            classes,
            getI18n,
            doUseDefaultCss,
          }),
        });

        appRef.components.forEach((componentRef) => {
          // page must be defined first
          if ('page' in componentRef.instance) {
            componentRef.setInput('page', PageComponent);
          }
        });
      }
      break;
    default:
      throw new Error('wrong themeType');
  }

  return appRef;
}
